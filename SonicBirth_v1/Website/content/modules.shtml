
<!--#set var="SB_TITLE" value="Modules" -->
<!--#include virtual="ssi/header.shtml" -->

<!--Right column-->
<p>Current version:</p>
<p><b>150</b> elements, with more to come!</p>

<!--#include virtual="ssi/mainColumn.ssi" -->
<!--Main column-->
<h2>Current modules</h2>

<!-- Begin autogenerated -->

<p><b>Algebraic</b></p><ul>
<li><p><em>Addition</em>:
Outputs the sum of both inputs.
<br>
Inputs : a, b.
<br>
Outputs : a+b.</p></li>

<li><p><em>Add Many</em>:
Outputs the summation of 3 to 16 inputs.
<br>
Inputs : in0, in1, in2, in3.
<br>
Outputs : out.</p></li>

<li><p><em>Substraction</em>:
Outputs (a - b).
<br>
Inputs : a, b.
<br>
Outputs : a-b.</p></li>

<li><p><em>Multiplication</em>:
Outputs (a * b).
<br>
Inputs : a, b.
<br>
Outputs : a*b.</p></li>

<li><p><em>Division</em>:
Outputs (a / b).
<br>
Inputs : a, b.
<br>
Outputs : a/b.</p></li>

<li><p><em>Constant Addition</em>:
Adds a constant number.
<br>
Inputs : i.
<br>
Outputs : o.</p></li>

<li><p><em>Constant Substraction</em>:
Substracts a constant number.
<br>
Inputs : i.
<br>
Outputs : o.</p></li>

<li><p><em>Constant Multiplication</em>:
Multiply by a constant number.
<br>
Inputs : i.
<br>
Outputs : o.</p></li>

<li><p><em>Constant Division</em>:
Divides by a constant number.
<br>
Inputs : i.
<br>
Outputs : o.</p></li>

<li><p><em>Constant Substraction Alt.</em>:
Constant number substracted by input.
<br>
Inputs : i.
<br>
Outputs : o.</p></li>

<li><p><em>Constant Division Alt.</em>:
Constant number divided by input.
<br>
Inputs : i.
<br>
Outputs : o.</p></li>

<li><p><em>Negation</em>:
Outputs -x.
<br>
Inputs : x.
<br>
Outputs : -x.</p></li>

<li><p><em>Inverse</em>:
Outputs 1/x.
<br>
Inputs : x.
<br>
Outputs : 1/x.</p></li>

<li><p><em>Absolute</em>:
Outputs |x| (x if x>=0, -x if x<0).
<br>
Inputs : x.
<br>
Outputs : |x|.</p></li>

<li><p><em>Absolute/Sign</em>:
Outputs |x| (x if x>=0, -x if x<0), and sign of x (1 for pos, -1 for neg).
<br>
Inputs : x.
<br>
Outputs : |x|, sign.</p></li>

<li><p><em>Direction</em>:
Outputs 1 if input is augmenting, -1 if it is descending, 0 otherwise.
<br>
Inputs : x.
<br>
Outputs : dir.</p></li>

<li><p><em>Multiply-Add</em>:
Outputs (a*b)+c.
<br>
Inputs : a, b, c.
<br>
Outputs : (a*b)+c.</p></li>

<li><p><em>Multiply-Sub</em>:
Outputs (a*b)-c.
<br>
Inputs : a, b, c.
<br>
Outputs : (a*b)-c.</p></li>

<li><p><em>Neg. Multiply-Add</em>:
Outputs -((a*b)+c).
<br>
Inputs : a, b, c.
<br>
Outputs : -((a*b)+c).</p></li>

<li><p><em>Neg. Multiply-Sub</em>:
Outputs -((a*b)-c).
<br>
Inputs : a, b, c.
<br>
Outputs : -((a*b)-c).</p></li>

</ul><p><b>Function</b></p><ul>
<li><p><em>Modulus</em>:
Outputs x % y (x mod y).
<br>
Inputs : x, y.
<br>
Outputs : x%y.</p></li>

<li><p><em>Ceil</em>:
Rounds to smallest integral value not less than x.
<br>
Inputs : x.
<br>
Outputs : o.</p></li>

<li><p><em>Floor</em>:
Rounds to largest integral value not greater than x.
<br>
Inputs : x.
<br>
Outputs : o.</p></li>

<li><p><em>Nearest integer</em>:
Rounds to nearest integer.
<br>
Inputs : x.
<br>
Outputs : o.</p></li>

<li><p><em>Exponential</em>:
Outputs e^x.
<br>
Inputs : x.
<br>
Outputs : e^x.</p></li>

<li><p><em>Natural logarithm</em>:
Outputs ln(x).
<br>
Inputs : x.
<br>
Outputs : ln(x).</p></li>

<li><p><em>Logarithm base 10</em>:
Outputs log10(x).
<br>
Inputs : x.
<br>
Outputs : log10(x).</p></li>

<li><p><em>Power</em>:
Outputs x^y.
<br>
Inputs : x, y.
<br>
Outputs : x^y.</p></li>

<li><p><em>Square root</em>:
Outputs sqrt(x).
<br>
Inputs : x.
<br>
Outputs : sqrt(x).</p></li>

<li><p><em>Reverse square root</em>:
Outputs rsqrt(x).
<br>
Inputs : x.
<br>
Outputs : rsqrt(x).</p></li>

<li><p><em>Quadratic Bezier</em>:
Outputs (1-t)^2*a + 2*t*(1-t)*b + t^2*c, where t is clamped to 0 .. 1. See http://en.wikipedia.org/wiki/B%e9zier_curve.
<br>
Inputs : t, a, b, c.
<br>
Outputs : o.</p></li>

</ul><p><b>Trigonometric</b></p><ul>
<li><p><em>Sinus</em>:
Outputs the sinus of the input.
<br>
Inputs : x.
<br>
Outputs : sin x.</p></li>

<li><p><em>Cosinus</em>:
Outputs the cosinus of the input.
<br>
Inputs : x.
<br>
Outputs : cos x.</p></li>

<li><p><em>Tangent</em>:
Outputs the tangent of the input.
<br>
Inputs : x.
<br>
Outputs : tan x.</p></li>

<li><p><em>Sinus and cosinus</em>:
Outputs both the sinus and the cosinus of the input.
<br>
Inputs : x.
<br>
Outputs : sin x, cos x.</p></li>

<li><p><em>Hyperbolic sinus</em>:
Outputs the hyperbolic sinus of the input.
<br>
Inputs : x.
<br>
Outputs : sinh x.</p></li>

<li><p><em>Hyperbolic cosinus</em>:
Outputs the hyperbolic cosinus of the input.
<br>
Inputs : x.
<br>
Outputs : cosh x.</p></li>

<li><p><em>Hyperbolic tangent</em>:
Outputs the hyperbolic tangent of the input.
<br>
Inputs : x.
<br>
Outputs : tanh x.</p></li>

<li><p><em>Arc sinus</em>:
Outputs the arc sinus of the input.
<br>
Inputs : x.
<br>
Outputs : asin x.</p></li>

<li><p><em>Arc cosinus</em>:
Outputs the arc cosinus of the input.
<br>
Inputs : x.
<br>
Outputs : acos x.</p></li>

<li><p><em>Arc tangent</em>:
Outputs the arc tangent of the input.
<br>
Inputs : x.
<br>
Outputs : atan x.</p></li>

<li><p><em>Arc tangent (x, y)</em>:
Outputs the arc tangent of y/x.
<br>
Inputs : x, y.
<br>
Outputs : atan(y/x).</p></li>

<li><p><em>Inverse hyperbolic sinus</em>:
Outputs the inverse hyperbolic sinus of the input.
<br>
Inputs : x.
<br>
Outputs : asinh x.</p></li>

<li><p><em>Inverse hyperbolic cosinus</em>:
Outputs the inverse hyperbolic cosinus of the input.
<br>
Inputs : x.
<br>
Outputs : acosh x.</p></li>

<li><p><em>Inverse hyperbolic tangent</em>:
Outputs the inverse hyperbolic tangent of the input.
<br>
Inputs : x.
<br>
Outputs : atanh x.</p></li>

</ul><p><b>Arguments </b></p><ul>
<li><p><em>Boolean</em>:
Boolean button with value for true and for false.
<br>
Outputs : value.</p></li>

<li><p><em>Slider</em>:
Basic slider with min/max.
<br>
Outputs : value.</p></li>

<li><p><em>Indexed</em>:
Indexed popup button with multiple values.
<br>
Outputs : value.</p></li>

<li><p><em>Points</em>:
Set of points making a line. Double-click to insert a point. Use left and right arrow to change interpolation type. Delete key to remove a point.
<br>
Outputs : pts.</p></li>

<li><p><em>Points Envelope</em>:
Set of points defining attack, loop and release.  Double-click to insert a point. Use left and right arrow to change interpolation type. Delete key to remove a point.
<br>
Outputs : pts.</p></li>

<li><p><em>Points Frequency</em>:
Set of points suitable for fft conversion or generation.  Double-click to insert a point. Use left and right arrow to change interpolation type. Delete key to remove a point.
<br>
Outputs : pts.</p></li>

<li><p><em>XY Pad</em>:
Two sliders combined in a XY pad.
<br>
Outputs : x, y.</p></li>

<li><p><em>Audio file argument</em>:
User selectable audio file with preset channel count.
<br>
Outputs : chan 0.</p></li>

<li><p><em>Keyboard Tap</em>:
Emits a single 1 when receiving a key stroke.
<br>
Outputs : tap.</p></li>

</ul><p><b>Midi arguments</b></p><ul>
<li><p><em>Midi slider</em>:
Outputs the value of the a midi parameter in a user supplied range.
<br>
Outputs : value.</p></li>

<li><p><em>Midi note state</em>:
Outputs the state (pressed or not) and velocity (0 to 1) for each specified note.</p></li>

<li><p><em>Midi mono note</em>:
Outputs the note and velocity (in the range 0 - 1) of the current presser note. You can select to hold the last note pressed.
<br>
Outputs : note, velo, numb.</p></li>

<li><p><em>Midi multi note</em>:
Duplicates the subcircuit on the fly for each pressed note, up to a maximum of 16. The outputs of these subcircuits are summed, then outputed. You can specify the attack and release time in milliseconds. Both are clamped to 0 .. 60000 milliseconds. You must stop/start for changes to take effect.
<br>
Inputs : atck, rlse.</p></li>

<li><p><em>Midi multi note envelope</em>:
Duplicates the subcircuit on the fly for each pressed note, up to a maximum of 16. The outputs of these subcircuits are summed, then outputed. You can specify the attack, loop and release time in milliseconds. All are clamped to 0 .. 60000 milliseconds. You must stop/start for changes to take effect.
<br>
Inputs : atck, loop, rlse, pts.</p></li>

<li><p><em>Midi XY Pad</em>:
Two sliders combined in a XY pad, midi controllable. (Y controller is always the one following the X controller).
<br>
Outputs : x, y.</p></li>

</ul><p><b>Display</b></p><ul>
<li><p><em>Display value</em>:
Shows the first value of the input of each audio cycle. Can be used in the plugin interface.
<br>
Inputs : in.</p></li>

<li><p><em>Display Osc.</em>:
An oscilloscope that can be used in the plugin interface.
<br>
Inputs : in.</p></li>

<li><p><em>Display Osc. (Var. res.)</em>:
An oscilloscope that can be used in the plugin interface.
<br>
Inputs : in, res.</p></li>

<li><p><em>Display Meter</em>:
A value meter that can be used in the plugin interface.
<br>
Inputs : in.</p></li>

</ul><p><b>Analysis</b></p><ul>
<li><p><em>Envelope Follower</em>:
Envelope follower with variable attack and release time, in milliseconds. The output is in positive linear units.
<br>
Inputs : in, atck, rlse.
<br>
Outputs : env.</p></li>

<li><p><em>Look ahead</em>:
Basic look ahead: outputs the current enveloppe of the input signal, and the delayed signal.
<br>
Inputs : in.
<br>
Outputs : out, env.</p></li>

<li><p><em>BPM Counter</em>:
BPM counter analyses its input and outputs the current bpm. Uses the last 4 events to average the bpm. Is considred an event when its input passes from under or equal to 0.5 to over 0.5.
<br>
Inputs : in.
<br>
Outputs : bpm.</p></li>

<li><p><em>Debug</em>:
Shows the first value of the input of each audio cycle.
<br>
Inputs : in.</p></li>

<li><p><em>Debug Osc.</em>:
An oscilloscope for debugging purpose.
<br>
Inputs : in.</p></li>

</ul><p><b>Comparators</b></p><ul>
<li><p><em>Minimum</em>:
Outputs the smallest of both inputs.
<br>
Inputs : a, b.
<br>
Outputs : min(a,b).</p></li>

<li><p><em>Maximum</em>:
Outputs the largest of both inputs.
<br>
Inputs : a, b.
<br>
Outputs : max(a,b).</p></li>

<li><p><em>Sort</em>:
Outputs the min and max of both inputs.
<br>
Inputs : a, b.
<br>
Outputs : min, max.</p></li>

<li><p><em>Less</em>:
If (a < b) the outputs c else outputs d.
<br>
Inputs : a, b, c, d.
<br>
Outputs : o.</p></li>

<li><p><em>Equal</em>:
If (a = b) the outputs c else outputs d.
<br>
Inputs : a, b, c, d.
<br>
Outputs : o.</p></li>

<li><p><em>Greater</em>:
If (a > b) the outputs c else outputs d.
<br>
Inputs : a, b, c, d.
<br>
Outputs : o.</p></li>

</ul><p><b>Converters</b></p><ul>
<li><p><em>Msec to samples</em>:
Converts milliseconds into samples.
<br>
Inputs : ms.
<br>
Outputs : smpl.</p></li>

<li><p><em>Samples to msec</em>:
Converts samples into milliseconds.
<br>
Inputs : smpl.
<br>
Outputs : ms.</p></li>

<li><p><em>Linear to db</em>:
Converts linear values into decibels.
<br>
Inputs : lin.
<br>
Outputs : db.</p></li>

<li><p><em>Db to linear</em>:
Converts decibels into linear values.
<br>
Inputs : db.
<br>
Outputs : lin.</p></li>

</ul><p><b>Delays</b></p><ul>
<li><p><em>Delay</em>:
Delays the input signal by a variable time (maximum is user specified - clamped to 60 seconds). The dly input is in seconds.
<br>
Inputs : in, dly.
<br>
Outputs : out.</p></li>

<li><p><em>Delay (samples)</em>:
Delays the input signal by a variable time in samples (max: 100000).
<br>
Inputs : in, dly.
<br>
Outputs : out.</p></li>

<li><p><em>Delay Sinc (samples)</em>:
Delays the input signal by a variable time in samples, using 16 points Blackman windowed sinc interpolation (min delay: 8 samples, max delay: 100000 samples).
<br>
Inputs : in, dly.
<br>
Outputs : out.</p></li>

</ul><p><b>Generators</b></p><ul>
<li><p><em>Sine Wave</em>:
Generates a sine wave, of frequency f (hz) and phase p (0 to 2pi).
<br>
Inputs : f, p.
<br>
Outputs : tone.</p></li>

<li><p><em>Fast Sine Wave</em>:
Generates a sine wave, of frequency f (hz). Low cpu usage.
<br>
Inputs : f.
<br>
Outputs : tone.</p></li>

<li><p><em>Saw Wave</em>:
Generates a saw wave, of frequency f (hz) and phase p (0 to 2pi).
<br>
Inputs : f, p.
<br>
Outputs : sawave.</p></li>

<li><p><em>Triangle Wave</em>:
Generates a triangle wave, of frequency f (hz) and phase p (0 to 2pi).
<br>
Inputs : f, p.
<br>
Outputs : twave.</p></li>

<li><p><em>Square wave</em>:
Generates a square wave, of frequency f (hz) and phase p (0 to 2pi).
<br>
Inputs : f, p.
<br>
Outputs : swave.</p></li>

<li><p><em>Linear Noise</em>:
Generates linear noise (random values between -1 and 1).
<br>
Outputs : lnoise.</p></li>

<li><p><em>White Noise</em>:
Generates white noise (random values between -1 and 1, with gaussian distribution).
<br>
Outputs : wnoise.</p></li>

<li><p><em>Pink Noise</em>:
Generates pink noise (1/f noise).
<br>
Outputs : pnoise.</p></li>

<li><p><em>Random</em>:
Generates random values between -1 and 1, changing the value at frequency f.
<br>
Inputs : f.
<br>
Outputs : rnd.</p></li>

<li><p><em>Random ramp</em>:
Generates random values between -1 and 1, changing the value at frequency f, interpolating between values.
<br>
Inputs : f.
<br>
Outputs : rnd.</p></li>

<li><p><em>FFT Generator</em>:
Generates waves using FFT based on input points..
<br>
Inputs : pts.
<br>
Outputs : snd.</p></li>

</ul><p><b>Filters</b></p><ul>
<li><p><em>DC Blocker</em>:
Cuts frequencies below 20 hz.
<br>
Inputs : in.
<br>
Outputs : out.</p></li>

<li><p><em>Parametric Eq.</em>:
Parametric Eq: f is the center frequency, g is the gain or cut in dB (clamped in the range -15 .. 15). Q should be between 0.3 and 15.
<br>
Inputs : in, f, g, Q.
<br>
Outputs : out.</p></li>

<li><p><em>Peak</em>:
Peaking eq, with constant Q (10) and dB gain (20 dB).
<br>
Inputs : in, f.
<br>
Outputs : out.</p></li>

<li><p><em>Notch</em>:
Notch with constant bandwitdh (0.1 octave).
<br>
Inputs : in, f.
<br>
Outputs : out.</p></li>

<li><p><em>Lowpass</em>:
Lowpass filter, 12/db octave (Butterworth), with variable cutoff frequency (clamped to [1, 20000]).
<br>
Inputs : in, f.
<br>
Outputs : out.</p></li>

<li><p><em>Highpass</em>:
Highpass filter, 12/db octave (Butterworth), with variable cutoff frequency (clamped to [1, 20000]).
<br>
Inputs : in, f.
<br>
Outputs : out.</p></li>

<li><p><em>Resonant lowpass</em>:
Resonant lowpass filter, 12/db octave (Butterworth), with variable cutoff frequency (clamped to [20, 20000]). Resonance should be between sqrt(2), that is 1.414..., for no resonance, and 0.1 for max resonance.
<br>
Inputs : in, f, r.
<br>
Outputs : out.</p></li>

<li><p><em>Resonant highpass</em>:
Resonant highpass filter, 12/db octave (Butterworth), with variable cutoff frequency (clamped to [20, 20000]). Resonance should be between sqrt(2), that is 1.414..., for no resonance, and 0.1 for max resonance.
<br>
Inputs : in, f, r.
<br>
Outputs : out.</p></li>

<li><p><em>Crossover</em>:
Linkwitz-Riley 24db/octave crossover.
<br>
Inputs : in, f.
<br>
Outputs : high, low.</p></li>

<li><p><em>Bandstop</em>:
24db/octave bandstop.
<br>
Inputs : in, f1, f2.
<br>
Outputs : out.</p></li>

<li><p><em>Bandpass</em>:
24db/octave bandpass.
<br>
Inputs : in, f1, f2.
<br>
Outputs : out.</p></li>

<li><p><em>Lowpass (fast)</em>:
Same as lowpass, but only checks its parameter once per audio cycle.
<br>
Inputs : in, f.
<br>
Outputs : out.</p></li>

<li><p><em>Highpass (fast)</em>:
Same as highpass, but only checks its parameter once per audio cycle.
<br>
Inputs : in, f.
<br>
Outputs : out.</p></li>

<li><p><em>Resonant lowpass (fast)</em>:
Same as resonant lowpass, but only checks its parameters once per audio cycle.
<br>
Inputs : in, f, r.
<br>
Outputs : out.</p></li>

<li><p><em>Resonant highpass (fast)</em>:
Same as resonant highpass, but only checks its parameters once per audio cycle.
<br>
Inputs : in, f, r.
<br>
Outputs : out.</p></li>

<li><p><em>Crossover (fast)</em>:
Same as crossover, but only checks its parameter once per audio cycle.
<br>
Inputs : in, f.
<br>
Outputs : high, low.</p></li>

<li><p><em>Bandstop (fast)</em>:
Same as bandstop, but only checks its parameters once per audio cycle.
<br>
Inputs : in, f1, f2.
<br>
Outputs : out.</p></li>

<li><p><em>Bandpass (fast)</em>:
Same as bandpass, but only checks its parameters once per audio cycle.
<br>
Inputs : in, f1, f2.
<br>
Outputs : out.</p></li>

<li><p><em>Allpass</em>:
Allpass, with variable delay, clamped between 0 and 1 sec. Equivalent to a feedback comb filter followed by a feedforward comb filter. y(t) = a*x(t) + x(t-dly) - b*y(t-dly)
<br>
Inputs : in, a, b, dly.
<br>
Outputs : out.</p></li>

<li><p><em>Feedback Comb</em>:
Feedback comb, with variable delay, clamped between 0 and 1 sec. y(t) = a*x(t) - b*y(t-dly)
<br>
Inputs : in, a, b, dly.
<br>
Outputs : out.</p></li>

<li><p><em>Feedforward Comb</em>:
Feedforward comb, with variable delay, clamped between 0 and 1 sec. y(t) = a*x(t) + b*x(t-dly)
<br>
Inputs : in, a, b, dly.
<br>
Outputs : out.</p></li>

<li><p><em>Formant filter</em>:
Formant filter with variable phonemes. Choose one on v1, another on v2, and you can mix between the two using input m [0,1]. Here are the phonemes:
phoneme 0: eee (beet)
phoneme 1: ihh (bit)
phoneme 2: ehh (bet)
phoneme 3: aaa (bat)
phoneme 4: ahh (father)
phoneme 5: aww (bought)
phoneme 6: uhh (but)
phoneme 7: uuu (foot)
phoneme 8: ooo (boot)
phoneme 9: rrr (bird)
phoneme 10: lll (lull)
phoneme 11: mmm (mom)
phoneme 12: nnn (nun)

<br>
Inputs : i, v1, v2, m.
<br>
Outputs : o.</p></li>

</ul><p><b>Feedback</b></p><ul>
<li><p><em>Feedback</em>:
Allows a feedback loop, with fixed delay (0.010000 seconds).
<br>
Inputs : in.
<br>
Outputs : out.</p></li>

</ul><p><b>Distortion</b></p><ul>
<li><p><em>Valve</em>:
Valve distortion simulation. Level and character range is 0 to 1. Level is how much the signal is driven against the limit of the valve. Character is the hardness of the sound.
<br>
Inputs : in, lv, ch.
<br>
Outputs : out.</p></li>

<li><p><em>Scraper</em>:
Degrades quality of sampling rate, and bit depth (parameters in the range [0, 1], where 0 is lowest quality and 1 is original signal).
<br>
Inputs : in, sr, bd.
<br>
Outputs : out.</p></li>

<li><p><em>Scraper (quick)</em>:
Degrades quality of sampling rate, and bit depth (parameters in the range [0, 1], where 0 is lowest quality and 1 is original signal). Less precise but faster version.
<br>
Inputs : in, sr, bd.
<br>
Outputs : out.</p></li>

</ul><p><b>Audio file</b></p><ul>
<li><p><em>Audio file</em>:
Loads an audio file and outputs each channel.</p></li>

<li><p><em>Audio player</em>:
Audio player plays the audio from the buffer when trig is non-zero. Start and end represents the playing offset. If end is smaller than start, speed is negated. Both these values should be between 0 and 1. Playing will loop if the loop input is non-zero. Speed give the playing speed, should be between -5 and 5. A negative speed means the buffers is played reversed.
<br>
Inputs : trig, start, end, loop, speed, buf.
<br>
Outputs : o.</p></li>

</ul><p><b>FFT</b></p><ul>
<li><p><em>FFT Sync</em>:
States the fft size and block positions.
<br>
Outputs : sync.</p></li>

<li><p><em>Forward FFT</em>:
Outputs the forward fft of the input, with variable block size (delay).
<br>
Inputs : sync, in.
<br>
Outputs : real, imag.</p></li>

<li><p><em>Inverse FFT</em>:
Outputs the inverse fft of the input.
<br>
Inputs : sync, real, imag.
<br>
Outputs : out.</p></li>

<li><p><em>Complex to Polar</em>:
Converts complex fft blocks into polar fft blocks.
<br>
Inputs : sync, real, imag.
<br>
Outputs : ampl, phas.</p></li>

<li><p><em>Polar to Complex</em>:
Converts polar fft blocks into complex fft blocks.
<br>
Inputs : sync, ampl, phas.
<br>
Outputs : real, imag.</p></li>

<li><p><em>Convolve</em>:
Convolve two fft signals (in the complex plane).
<br>
Inputs : sync, r1, i1, r2, i2.
<br>
Outputs : ro, io.</p></li>

<li><p><em>Points To FFT</em>:
Transforms a points function into frequency amplitudes. Range is in db.
<br>
Inputs : sync, pts, range.
<br>
Outputs : real, imag.</p></li>

<li><p><em>Audio file To FFT</em>:
Transforms an audio file to an fft block (considering samples up to half the fft block size).
<br>
Inputs : sync, af.
<br>
Outputs : real, imag.</p></li>

</ul><p><b>Miscellaneous</b></p><ul>
<li><p><em>Circuit</em>:
A circuit inside another.</p></li>

<li><p><em>Constant</em>:
A constant number.
<br>
Outputs : o.</p></li>

<li><p><em>Equation</em>:
A mathematical equation. You can use these functions:

sin(x), cos(x), tan(x), asin(x), acos(x), atan(x),
sinh(x), cosh(x), tanh(x), asinh(x), acosh(x), atanh(x),
atan2(x,y), pow(x,y), min(x,y), max(x,y), mod(x,y),
abs(x), floor(x), ceil(x), nearint(x), inv(x),
exp(x), log(x), log10(x), sqrt(x), revsqrt(x).

Speed: compare the execute plan for:
	- i0*2*3 and i0*(2*3)
	- i0*i0*i0*i0 and (i0*i0)*(i0*i0)

You can also enter an equation in the constant element (sqrt(2) for example).
<br>
Inputs : i0.
<br>
Outputs : o.</p></li>

<li><p><em>Piecewise circuit</em>:
Depending on the value of the range input, a specific subcircuit is executed. This value is checked once per block of samples. The subcircuit which is entered when clicking next depends on the selected row in the settings window.
<br>
Inputs : range.</p></li>

<li><p><em>Samplerate Doubler</em>:
Audio processing inside this circuit is done at double sample rate, which can be useful (sounds better) for some type of calculations (filters).</p></li>

<li><p><em>Timer</em>:
Outputs the time in seconds, when run is 1, outputs 0 otherwise. Time is reset then run switchs to 1.
<br>
Inputs : run.
<br>
Outputs : time.</p></li>

<li><p><em>Timer loop</em>:
Outputs the time in seconds, looping back to 0 when arriving to the max time specified. Loops back to 0 when arriving to the max time specified.If the max is equal or smaller than 0, then it does not loop. Time is reset then run switchs to 1.
<br>
Inputs : run, max.
<br>
Outputs : time.</p></li>

<li><p><em>Freeverb</em>:
Jezar's freeverb. (Room size: 0.5 to 0.999, damp: 0 to 1, wet: 0 to 3, dry: 0 to 2, width: 0 to 1, freeze: 0/no or 1/yes)
<br>
Inputs : in1, in2, room size, damp, wet, dry, width, freeze.
<br>
Outputs : out1, out2.</p></li>

<li><p><em>Cleaner</em>:
Removes denormals, infinities and nan (not a number). Use this if your circuit can potentially create those numbers (division by 0, tan(pi/2), etc). The signal can optinnaly be clamped to [-1 .. 1].
<br>
Inputs : in.
<br>
Outputs : out.</p></li>

<li><p><em>Points apply</em>:
Applies the points function using x and y as origin, width and height as size.
<br>
Inputs : i, x, y, w, h, pts.
<br>
Outputs : o.</p></li>

<li><p><em>Bufferizer</em>:
Buffer object with three modes: silence (0), play (1), record (2). In playing mode, start and end represents the playing offset. If end is smaller than start, speed is negated. Both these values should be between 0 and 1. Playing will loop if the loop input is non-zero. Speed give the playing speed, should be between -5 and 5. A negative speed means the buffers is played reversed. In record mode, the buffer is filled from start up to its capacity.
<br>
Inputs : in, mode, start, end, loop, speed.
<br>
Outputs : out.</p></li>

<li><p><em>Trigger</em>:
Trigger sends either the on value or off value depending on its internal state. Its state is initialized as off. If the t (trigger) input is higher than the tt (trigger threshold) input, its state is turned on. If the r (reset) input is higher than the rt (reset threshold) input, its stated is turned off. In case both events are occuring simultaneously, the state is turned on.
<br>
Inputs : tt, rt, t, r, on, off.
<br>
Outputs : o.</p></li>

<li><p><em>Change Slower</em>:
Slows the rate of change of the input on a specified amount of milliseconds.
<br>
Inputs : i.
<br>
Outputs : o.</p></li>

<li><p><em>Convolving reverb</em>:
Convolving reverb, 4096 samples latency. Max reverb length: 2457600 samples. Memory usage at max reverb length: 75.4 MBs
<br>
Inputs : in, ir.
<br>
Outputs : out.</p></li>

<li><p><em>AudioUnit</em>:
Wraps a third party audiounit.
<br>
Inputs : tempo, beat.</p></li>

<li><p><em>AudioUnit (midi)</em>:
Wraps a third party audiounit.
<br>
Inputs : tempo, beat.</p></li>

<li><p><em>Granulate effect</em>:
Granulator effect. Delay is max delay in seconds to create grain from (max 10 seconds). DRandomness is a value between 0 and 1 affecting the grain's delay.Ramp is a value between 0 and 100. At 0 no attack or decay is used. At 100 it gives a triangular envelope, at 50 a trapezoidal envelope. Voices is the number of simultaneous grains (max 100). Length is the duration of grains in seconds (max 1 second). LRandomness is a value between 0 and 1 affecting the grain's length.Silence is the duration of silence between grains in seconds (max 10 seconds). SRandomness is a value between 0 and 1 affecting the silence's length.
<br>
Inputs : i, delay, drndness, ramp, voices, length, lrndness, silence, srndness.
<br>
Outputs : o.</p></li>

<li><p><em>Granulate effect with pitch</em>:
Granulator effect with variable picth. Delay is max delay in seconds to create grain from (max 10 seconds). DRandomness is a value between 0 and 1 affecting the grain's delay.Ramp is a value between 0 and 100. At 0 no attack or decay is used. At 100 it gives a triangular envelope, at 50 a trapezoidal envelope. Voices is the number of simultaneous grains (max 100). Length is the duration of grains in seconds (max 1 second). LRandomness is a value between 0 and 1 affecting the grain's length.Silence is the duration of silence between grains in seconds (max 10 seconds). SRandomness is a value between 0 and 1 affecting the silence's length.Pitch is the grain playing speed (0.5 to 5) - can be negative. PRandomness is a value between 0 and 1 affecting the pitch.
<br>
Inputs : i, delay, drndness, ramp, voices, length, lrndness, silence, srndness, pitch, prndness.
<br>
Outputs : o.</p></li>

</ul><p><b>Internal</b></p><ul>
<li><p><em>Interpolation Precision</em>:
Sets the interpolation type of the audio engine.</p></li>

<li><p><em>Bit Precision</em>:
Sets the bit precision of the audio engine.</p></li>

<li><p><em>Midi settings</em>:
MIDI settings central control.</p></li>

</ul>


<!-- End autogenerated -->

<!--#include virtual="ssi/footer.ssi" -->
